#!/bin/bash
# fzf specialized functional fuzzy searches
# dependencies: fzf, ripgrep, trash-cli 
# optionals: ripgrep-all

printHelp() {
    printf "USAGE:
    \t\e[1m'hidden'\e[0m hidden files excluding .git and .cache;
    \t\e[1m'md'\e[0m markdown files;
    \t\e[1m'pdf'\e[0m pdf and postscript files;
    \t\e[1m'media'\e[0m videos and audio files;
    \t\e[1m'full'\e[0m full text search documents; 
    \t\e[1m'cd'\e[0m show and cd to sub-directories;
    \t\e[1m'ps'\e[0m show and manage processes."
}

# SETTINGS
# Load user configuration: $editor, $batPreview, $pdfPreview, $mediaPreview, $colors
config_file="$XDG_CONFIG_HOME/fzfx/config"
#shellcheck disable=SC1090
[ -f "$config_file" ] && source "$config_file"

# Search from absolute path if root is set
# shellcheck disable=SC2154
if [ "$root" ]; then
    cd "$root" ||:
fi

# Try to set sensible alternatives for non-specified
[ "$pdfPreview" ] || pdfPreview="evince -w"
[ "$mediaPreview" ] || mediaPreview="mpv --no-terminal --length=5" # autoclose after 5s 
[ "$batPreview" ] || batPreview="bat --style=numbers --color=always --line-range :500 {}"

# Set editor: use $editor from config, otherwise, use $EDITOR, if defined, or whatever is available.
if ! [ "$editor" ]; then
    editors=(vi vim nvim nano)
    # shellcheck disable=SC2153
    if [ "$EDITOR" ]; then
        editor=$EDITOR
    else
        for prog in "${editors[@]}"; do
            if [ "$(command -v "$prog")" ]; then
                # remove alias and path prefix
                editor=$(command -v "$prog" | sed 's/alias .*=//;s#.*/##')
            fi
        done
    fi
fi

# Colors
# Uncomment with you want the colors from supernova-theme
#colors="--color=\
#dark,\
#bg+:#373e47,\
#bg:#2d333b,\
#spinner:#6bac00,\
#hl:#0087e9,\
#fg:#adbac7,\
#header:#009385,\
#info:#d9b600,\
#pointer:#b37eff,\
#marker:#cf2424,\
#fg+:#dddddd,\
#prompt:#d40059,\
#hl+:#ff5c00"

# Binds
# f1 opens with xdg-open, f2 opens with text editor, f3 copy path to console clipboard,
# f4 echoes path to stdout, del move file to trash.

# open with nautilus is disabled because it's hanging the console after window is closed
# f5:execute-silent(nautilus -w -s {} >/dev/null)

# Defaults
export FZF_DEFAULT_OPTS="$FZF_DEFAULT_OPTS \
--bind '\
f1:execute-silent(xdg-open {} 2>/dev/null),\
f2:execute($editor {}),\
f3:execute-silent(xclip <<< {}),\
f4:accept' \
    --header 'f1 → default, f2 → editor, f3 → clipboard, f4 → terminal, del → delete' \
    --preview-window=right:60%:wrap ${colors:-}"

# LIB
# fd arguments: '-t' is type; '-E' is exclude pattern; '-uu' is a short for '--no-ignore' and '--hidden'; '-i' is '--ignore-case'; '-g' is glob

# TODO: Apply DRY principle to pattern exclusion

fzfDefault() {
# F: find almost anything
    fd -t f -i -E '**/.git/**' -E '**cache/**' -E '**/node_modules/**' | fzf --preview "$batPreview"
}

fzfHidden() {
# FHIDDEN: find anything including hidden files
    fd -t f -iuu -E '**/.git/**' -E '.cache/**' | fzf --preview "$batPreview"
}
fzfMd() {
# FMD: find markdown notes
    fd -t f -i -g '*.md' |
    fzf --bind "del:reload(trash {} && fd -t f -i -g '*.md')" --preview "$batPreview"
}

fzfPdf() {
# FPDF: find preview pdf and postscript files
    local bind
    if [[ $(command -v evince) ]]; then
        bind="enter:execute-silent($pdfPreview {} &>/dev/null),del:reload(trash {} && fd -t f -i '^.*\.(pdf|ps|eps)$')"
    else
        bind="enter:execute-silent(xdg-open {} &>/dev/null),del:reload(trash {} && fd -t f -i '^.*\.(pdf|ps|eps)$')"
    fi

    fd -t f -i '^.*\.(pdf|ps|eps)$' | fzf --bind "$bind"
}

fzfMedia() {
# FVID: find video files 
    local bind
    if [[ $(command -v evince) ]]; then
        bind="enter:execute-silent($mediaPreview {}),del:reload(touch {} && fd -t f -i '^.*\.(mkv|mp4|webm|avi)$')"
    else
        bind="enter:execute-silent(xdg-open {}),del:reload(touch {} && fd -t f -i '^.*\.(mkv|mp4|webm|avi)$')"
    fi

    fd -t f -i '^.*\.(mkv|mp4|webm|avi)$' | fzf --bind "$bind"
} 

fzfFull() {
# FULL: search inside files
    if [[ $(command -v rga) ]]; then
        rgFind="rga -i --files-with-matches --rga-adapters='-decompress,tar,zip,ffmpeg,sqlite'"
        rgPreview="[[ ! -z {} ]] && rga --pretty --context 10 {q} {}"
    else
        rgFind="rg -i --files-with-matches --no-messages"
        rgPreview="rg --ignore-case --pretty --no-line-number --context 10 {q} {}"
    fi

    export FZF_DEFAULT_COMMAND="$rgFind '$1'"
    fzf --preview "$rgPreview" \
        --sort --phony -q "$1" \
        --bind "change:reload:$rgFind {q}"
}

fzfCd() {
# FCD: search dirs and cd to them
    [ "$(command -v tree)" ] && local preview="tree -C -c {} | head -200"
    
    # shellcheck disable=SC2164 # it's already a noop
    fd -t d -i | fzf --preview "${preview:-ls --color=always {}}" --bind 'enter:accept' \
        --header "f1 → browser, f2 → editor, enter → cd"
}

fzfPs() {
# FPS: search processes and manage them
# f1 term, f2 kill, f3 sleep, f4 wake
    psFind="ps -Ao pid,cmd,%mem,%cpu,tt,user,time,stat"
    # if grc is installed append it to command prefix
    [ "$(command -v grc)" ] && psFind="grc --colour=on $psFind"
    # shellcheck disable=SC2031
    export FZF_DEFAULT_COMMAND="$psFind"
    fzf --ansi --header-lines=1 --reverse --cycle \
        --header "f1 → SIGTERM, f2 → SIGKILL, f3 → SIGSTOP, f4 → SIGCONTv" \
        --bind "change:reload($psFind),\
f1:reload(kill -15 {1} && sleep 0.15 && $psFind),\
f2:reload(kill -9 {1} && sleep 0.15 && $psFind),\
f3:reload(kill -19 {1} && sleep 0.15 && $psFind),\
f4:reload(kill -18 {1} && sleep 0.15 && $psFind)"
}

case $1 in
    help) printHelp;;
    hidden) fzfHidden;;
    md) fzfMd;;
    pdf) fzfPdf;;
    media) fzfMedia;;
    full) fzfFull "$2";;
    cd) fzfCd;;
    ps) fzfPs "$2";;
    *) fzfDefault;;
esac
